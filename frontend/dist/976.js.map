{"version":3,"file":"976.js","mappings":"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","sources":["webpack://mq-navigator3.0client/./src/components/Modal/styles.tsx","webpack://mq-navigator3.0client/./src/components/Modal/index.tsx","webpack://mq-navigator3.0client/./src/components/Playbar/styles.tsx","webpack://mq-navigator3.0client/./src/hooks/useCustomPlaybar.ts","webpack://mq-navigator3.0client/./src/hooks/useInput.ts","webpack://mq-navigator3.0client/./src/components/Map/index.tsx","webpack://mq-navigator3.0client/./src/components/Menu/styles.tsx","webpack://mq-navigator3.0client/./src/components/Menu/index.tsx","webpack://mq-navigator3.0client/./src/layouts/BasicLayout/styles.tsx","webpack://mq-navigator3.0client/./src/components/Map/styles.tsx","webpack://mq-navigator3.0client/./src/components/Playbar/index.tsx","webpack://mq-navigator3.0client/./src/layouts/BasicLayout/index.tsx","webpack://mq-navigator3.0client/./src/pages/member/SignUp/styles.tsx","webpack://mq-navigator3.0client/./src/utils/displayUtil.ts"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CreateModal = styled.div`\n  position: fixed;\n  text-align: center;\n  left: 0;\n  bottom: 0;\n  top: 0;\n  right: 0;\n  z-index: 1022;\n\n  & > div {\n    margin-top: 200px;\n    display: inline-block;\n    width: 440px;\n    background: white;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    max-width: 440px;\n    padding: 30px 40px;\n    z-index: 1012;\n    position: relative;\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CreateModal, CloseModalButton } from '@components/Modal/styles';\nimport React, { FC, PropsWithChildren, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n}\n\nconst Modal: FC<PropsWithChildren<Props>> = ({ show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateModal onClick={onCloseModal}>\n      <div onClick={stopPropagation}>\n        <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>\n        {children}\n      </div>\n    </CreateModal>\n  );\n};\n\nexport default Modal;\n","import styled from '@emotion/styled';\n\nexport const PlaybarContainer = styled.div`\n  width: 100%;\n  height: 120px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n`;\n\nexport const ContentRow = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nexport const LeftContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 170px;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const RightContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n`;\nexport const ContentLine = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-shrink: 0;\n`;\n\nexport const ContentLineText = styled.p`\n  margin: 10px;\n  height: 40px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: center;\n  font-weight: 500;\n`;\n\nexport const ContentLineDiv = styled.div`\n  margin: 10px;\n  height: 40px;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: #666;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const ContentLineInput = styled.input`\n  margin: 10px;\n  height: 40px;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n  box-sizing: border-box;\n\n  &:focus {\n    outline: none;\n    border-color: #666;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const SelectOption = styled.select`\n  margin: 10px;\n  height: 40px;\n  border: none;\n  box-sizing: border-box;\n  border-radius: 4px;\n  padding: 5px;\n  font-size: 16px;\n  font-weight: 500;\n\n  &:focus {\n    outline: none;\n    box-shadow: none;\n  }\n`;\nexport const CustomIconButton = styled.button`\n  display: flex;\n  margin: 10px;\n  width: 40px;\n  height: 40px;\n  border-radius: 4px;\n  justify-content: space-around;\n  align-items: center;\n  font-size: 15px;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  &:hover {\n    background-color: #ccc;\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nexport const CustomTextButton = styled.button`\n  margin: 10px;\n  padding: 5px 10px;\n  color: #000;\n  border: 1px solid #999;\n  border-radius: 4px;\n  font-size: 16px;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background-color 0.3s ease, transform 0.3s ease;\n\n  &:hover {\n    background-color: #ccc;\n  }\n\n  &:active {\n    transform: scale(0.95);\n  }\n\n  &:focus {\n    outline: none;\n    box-shadow: 0 0 5px #ccc;\n  }\n`;\n\nexport const RightContentIcon = styled.i`\n  flex: 1;\n  margin: 10px;\n  padding: 5px;\n  font-size: 24px;\n  cursor: pointer;\n  transition: color 0.3s ease, transform 0.3s ease;\n\n  &.dimmed {\n    color: #aaa; // 어두운 색상으로 변경\n    cursor: not-allowed; // 클릭 비활성화 느낌\n  }\n\n  &:active {\n    color: #000;\n  }\n`;\n\nexport const ProgressContainer = styled.div`\n  bottom: 30px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin: 20px;\n  height: 40px;\n`;\n\nexport const ProgressBar = styled.input`\n  width: calc(100%);\n  height: 10px;\n  appearance: none;\n  background-color: #ccc;\n  cursor: pointer;\n  //margin: 0 10px 0 10px;\n  margin: 0;\n  position: absolute;\n\n  &::-webkit-slider-thumb {\n    appearance: none;\n    width: 20px;\n    height: 20px;\n    background-color: #333;\n    border-radius: 50%;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n  }\n\n  &:active::-webkit-slider-thumb {\n    background-color: #333;\n  }\n`;\n\n// Styled component for GateMarker\nexport const GateMarker = styled.div`\n  position: absolute;\n  border-radius: 4px;\n  top: 0;\n  width: 15px;\n  height: 20px;\n  background-color: white;\n  transform: translateX(-50%); // 정 중앙 위치\n  font-size: 14px;\n  color: black;\n  text-align: center;\n`;\n\nexport const DistanceDisplay = styled.div`\n  display: flex;\n  justify-content: space-between;\n  width: 120px;\n  padding: 20px;\n  font-size: 14px;\n  font-weight: 500;\n`;\n","import { AppDispatch, RootState } from '../store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  toggleLive,\n  updateCurrentTime,\n  updateSelectedPoint,\n  updateSelectedTime,\n  updateFirstGate,\n  updateLastGate,\n  updatePreviousGateBasedOnSelected,\n  updateLatestGateBasedOnSelected,\n  updateNextGateBasedOnSelected,\n  updatePreviousGateBasedOnCurrent,\n  updateLatestGateBasedOnCurrent,\n  updateNextGateBasedOnCurrent,\n} from '@slices/playbarSlice';\nimport { IGate, NullableIGate } from '@typings/db';\nimport { useEffect } from 'react';\n\nconst useCustomPlaybar = () => {\n  const playbarState = useSelector((state: RootState) => state.playbarSlice); // Redux에서 플레이바 상태 가져오기\n  const isLive = useSelector((state: RootState) => state.playbarSlice.isLive); // Redux에서 isLive 가져오기\n  const dispatch: AppDispatch = useDispatch();\n\n  // currentTime 매초 변경\n  useEffect(() => {\n    const interval = setInterval(() => {\n      dispatch(updateCurrentTime());\n    }, 1000);\n\n    return () => clearInterval(interval); // 컴포넌트 언마운트 시 인터벌 정리\n  }, [dispatch]);\n\n  function updateSelectedTimeHook(selectedTime: string) {\n    dispatch(updateSelectedTime(selectedTime));\n  }\n\n  function updateSelectedPointHook(selectedPoint: NullableIGate | null) {\n    dispatch(updateSelectedPoint(selectedPoint));\n  }\n\n  function updateFirstGateHook(firstGate: IGate | null) {\n    dispatch(updateFirstGate(firstGate));\n  }\n\n  function updateLastGateHook(lastGate: IGate | null) {\n    dispatch(updateLastGate(lastGate));\n  }\n\n  function updatePreviousGateBasedOnSelectedHook(previousGate: IGate | null) {\n    dispatch(updatePreviousGateBasedOnSelected(previousGate));\n  }\n\n  function updateLatestGateBasedOnSelectedHook(latestGate: IGate | null) {\n    dispatch(updateLatestGateBasedOnSelected(latestGate));\n  }\n\n  function updateNextGateBasedOnSelectedHook(nextGate: IGate | null) {\n    dispatch(updateNextGateBasedOnSelected(nextGate));\n  }\n\n  function updatePreviousGateBasedOnCurrentHook(previousGate: IGate | null) {\n    dispatch(updatePreviousGateBasedOnCurrent(previousGate));\n  }\n\n  function updateLatestGateBasedOnCurrentHook(latestGate: IGate | null) {\n    dispatch(updateLatestGateBasedOnCurrent(latestGate));\n  }\n\n  function updateNextGateBasedOnCurrentHook(nextGate: IGate | null) {\n    dispatch(updateNextGateBasedOnCurrent(nextGate));\n  }\n\n  const handleLiveToggle = () => {\n    dispatch(toggleLive());\n  };\n\n  return {\n    playbarState,\n    isLive,\n    handleLiveToggle,\n    updateSelectedTimeHook,\n    updateSelectedPointHook,\n    updateFirstGateHook,\n    updateLastGateHook,\n    updatePreviousGateBasedOnSelectedHook,\n    updateLatestGateBasedOnSelectedHook,\n    updateNextGateBasedOnSelectedHook,\n    updatePreviousGateBasedOnCurrentHook,\n    updateLatestGateBasedOnCurrentHook,\n    updateNextGateBasedOnCurrentHook,\n  };\n};\n\nexport default useCustomPlaybar;\n","import { Dispatch, SetStateAction, useCallback, useState, ChangeEvent } from 'react';\n\ntype ReturnTypes<T> = [T, (e: ChangeEvent<HTMLInputElement>) => void, Dispatch<SetStateAction<T>>];\n\nconst useInput = <T>(initialData: T): ReturnTypes<T> => {\n  const [value, setValue] = useState(initialData);\n  const handler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setValue(e.target.value as unknown as T);\n  }, []);\n  return [value, handler, setValue];\n};\n\nexport default useInput;\n","import React, { useEffect, useState, useRef, useCallback } from 'react';\nimport { APIProvider } from '@vis.gl/react-google-maps';\nimport useCustomGates from '@hooks/useCustomGates';\nimport { MarkerPosition, NullableCoordinate } from '@typings/db';\nimport useCustomPlaybar from '@hooks/useCustomPlaybar';\nimport useCustomSetting from '@hooks/useCustomSetting';\nimport { calculateSpeed, convertEnumColorToString, convertEnumToleranceRangeToNumber } from '@utils/displayUtil';\n\n// type latLngCoordinates = { lat: number; lng: number };\n\nconst MapComponent: React.FC = () => {\n  const { gatesState, updateGatesWithIndex } = useCustomGates();\n  const { playbarState } = useCustomPlaybar();\n  const containerRef = useRef<HTMLDivElement | null>(null); // HTMLDivElement 참조\n  const mapRef = useRef<google.maps.Map | null>(null); // google.maps.Map 참조\n  const [markers, setMarkers] = useState<google.maps.marker.AdvancedMarkerElement[] | null>([]);\n  const [path, setPath] = useState<google.maps.LatLngLiteral[] | null>([]);\n  const [polyline, setPolyline] = useState<google.maps.Polyline | null>(null);\n  const [polylines, setPolylines] = useState<google.maps.Polyline[] | null>(null);\n  const [initialLocation, setInitialLocation] = useState<MarkerPosition>({ lat: 37.5665, lng: 126.978 });\n  const [selectedMarker, setSelectedMarker] = useState<google.maps.marker.AdvancedMarkerElement | null>(null);\n  const { selectedPoint } = playbarState;\n  const [selectedCoordinate, setSelectedCoordinate] = useState<NullableCoordinate | null>(null);\n  const { settingState } = useCustomSetting();\n  const { colorSetting, toleranceRange } = settingState;\n\n  // 선행조건 :\n  //      gatesMarkers 는 전역 gatesState 가 없데이트가 되어있어야 가능하다.\n  //      polyline 은 전역 path 값이 업데이트가 되어있어야 가능하다. 선행조건 : updateGatesMarkers -> path 설정\n  //      selectedPointMarker 는 selectedPoint 가 업데이트가 되어있어야 가능하다.\n\n  useEffect(() => {\n    if (selectedPoint) {\n      setSelectedCoordinate(selectedPoint.coordinate);\n    }\n  }, [selectedPoint, selectedCoordinate]);\n\n  useEffect(() => {\n    executeAllSequentially().then();\n  }, [gatesState, selectedCoordinate, mapRef, settingState]);\n\n  const executeAllSequentially = useCallback(async () => {\n    if (containerRef.current) {\n      await rerenderMap();\n      await updateGatesMarkers();\n      // await updatePolyline();\n      await updatePolylineWithColor();\n      await updateSelectedPointMarker();\n    }\n  }, [gatesState, selectedCoordinate, mapRef, settingState]);\n\n  const rerenderMap = useCallback(async () => {\n    if (containerRef.current) {\n      setMarkers([]);\n      setPath([]);\n      setSelectedMarker(null);\n      mapRef.current = new google.maps.Map(containerRef.current, {\n        center: initialLocation,\n        zoom: 7,\n        // mapId: 'd7a1d96b7d5ef0af', //나\n        mapId: '70c296db922d358d',\n      });\n    }\n  }, [initialLocation]);\n\n  const updateGatesMarkers = useCallback(async () => {\n    if (!mapRef.current) return;\n    let newMarkers: google.maps.marker.AdvancedMarkerElement[] = []; // 빈 배열로 초기화\n    let newPath: google.maps.LatLngLiteral[] = []; // 빈 배열로 초기화\n\n    gatesState.forEach((gate, index) => {\n      const { latitude: lat, longitude: lng } = gate.coordinate;\n\n      const gateTag = document.createElement('div');\n      gateTag.className = 'gate-tag';\n      gateTag.textContent = 'Gate ' + (index + 1);\n\n      if (lat && lng) {\n        const markerPosition: google.maps.LatLngLiteral = createPosition(lat, lng);\n        const newMarker = new google.maps.marker.AdvancedMarkerElement({\n          position: markerPosition,\n          map: mapRef.current,\n          content: gateTag,\n          gmpDraggable: true,\n        });\n\n        newMarker.addListener('dragend', (event: google.maps.MapMouseEvent) => {\n          const latLng = event.latLng;\n          if (latLng) {\n            const newCoordinate = createCoordinate(latLng.lat(), latLng.lng());\n            updateGatesWithIndex(index, newCoordinate);\n            const newPosition = createPosition(latLng.lat(), latLng.lng());\n            setInitialLocation(newPosition);\n\n            // path 배열의 해당 마커 위치를 새로운 위치로 업데이트\n            const updatedPath = path ? [...path] : [];\n            updatedPath[index] = newPosition;\n            setPath(updatedPath); // 상태 업데이트\n          }\n        });\n\n        newMarkers.push(newMarker);\n        newPath.push(markerPosition);\n      }\n    });\n\n    setMarkers(newMarkers);\n    setPath(newPath);\n  }, [gatesState, path, updateGatesWithIndex, mapRef]);\n\n  const updatePolyline = useCallback(async () => {\n    if (polyline) {\n      polyline.setMap(null);\n    }\n\n    const newPolyline = new google.maps.Polyline({\n      path: path,\n      geodesic: true,\n      strokeColor: '#999977',\n      strokeOpacity: 1.0,\n      strokeWeight: 2,\n    });\n\n    newPolyline.setMap(mapRef.current);\n    setPolyline(newPolyline);\n  }, [polyline, path, mapRef]);\n\n  const updatePolylineWithColor = useCallback(async () => {\n    const newPolylines: google.maps.Polyline[] | null = [];\n\n    gatesState.forEach((gate, index) => {\n      if (index < gatesState.length - 1) {\n        const newPath = [\n          createPosition(gatesState[index].coordinate.latitude, gatesState[index].coordinate.longitude),\n          createPosition(gatesState[index + 1].coordinate.latitude, gatesState[index + 1].coordinate.longitude),\n        ];\n\n        let strokeColor = '#999977'; // 기본 색상\n\n        if (\n          gatesState[index].time !== null &&\n          gatesState[index + 1].time !== null &&\n          gatesState[index].traveledDistance !== null &&\n          gatesState[index + 1].traveledDistance !== null\n        ) {\n          const currentSegmentSpeed = calculateSpeed(gatesState[index], gatesState[index + 1]) as number;\n\n          if (index === 0 || !gatesState[index - 1].time === null || !gatesState[index - 1].traveledDistance === null) {\n            strokeColor = convertEnumColorToString(colorSetting.initialColor);\n          } else {\n            const previousSegmentSpeed: number = calculateSpeed(gatesState[index - 1], gatesState[index]) as number;\n            if (\n              Math.abs(currentSegmentSpeed - previousSegmentSpeed) <\n              (convertEnumToleranceRangeToNumber(toleranceRange) / 100) * currentSegmentSpeed\n            ) {\n              strokeColor = convertEnumColorToString(colorSetting.constantSpeedColor);\n            } else if (currentSegmentSpeed < previousSegmentSpeed) {\n              strokeColor = convertEnumColorToString(colorSetting.decelerationColor);\n            } else {\n              strokeColor = convertEnumColorToString(colorSetting.accelerationColor);\n            }\n          }\n        }\n\n        const polyline = new google.maps.Polyline({\n          path: newPath,\n          geodesic: true,\n          strokeColor: strokeColor,\n          strokeOpacity: 1.0,\n          strokeWeight: 5,\n        });\n\n        polyline.setMap(mapRef.current);\n        newPolylines.push(polyline);\n      }\n    });\n\n    setPolylines(newPolylines);\n  }, [settingState, gatesState, toleranceRange]);\n\n  // colorSetting.accelerationColor,\n  //   colorSetting.constantSpeedColor,\n  //   colorSetting.decelerationColor,\n  //   colorSetting.initialColor,\n\n  const updateSelectedPointMarker = useCallback(async () => {\n    let newSelectedMarker: google.maps.marker.AdvancedMarkerElement | null = null;\n    if (selectedCoordinate) {\n      const { latitude: lat, longitude: lng } = selectedCoordinate;\n      if (lat && lng) {\n        const markerPosition: google.maps.LatLngLiteral = createPosition(lat, lng);\n\n        const pointTag = document.createElement('div');\n        pointTag.className = 'point-tag';\n        pointTag.textContent = 'Selected ';\n\n        newSelectedMarker = new google.maps.marker.AdvancedMarkerElement({\n          position: markerPosition,\n          map: mapRef.current,\n          content: pointTag,\n          gmpDraggable: true,\n        });\n      }\n    }\n    setSelectedMarker(newSelectedMarker);\n  }, [selectedCoordinate, mapRef]);\n\n  function createCoordinate(latitude: number, longitude: number) {\n    return { latitude: latitude, longitude: longitude };\n  }\n\n  function createPosition(lat: number, lng: number) {\n    return { lat: lat, lng: lng };\n  }\n\n  return (\n    <>\n      {/*<APIProvider apiKey={'AIzaSyDfXQ99l7TWfyfvujf8d52Ug1EDl5ok20M'}>*/}\n      <APIProvider apiKey={'AIzaSyCfTicyWufxJ5OqE32Yn4t4fJo0vI72gUc'}>\n        <div ref={containerRef} style={{ width: '100%', height: '100%' }} />\n      </APIProvider>\n    </>\n  );\n};\n\nexport default MapComponent;\n","import styled from '@emotion/styled';\n\nexport const CreateMenu = styled.div`\n  position: fixed;\n  top: 0;\n  right: 0;\n  left: 0;\n  bottom: 0;\n  z-index: 1000;\n\n  & > div {\n    position: absolute;\n    display: inline-block;\n    --saf-0: rgba(var(--sk_foreground_low, 29, 28, 29), 0.13);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 4px 12px 0 rgba(0, 0, 0, 0.12);\n    background-color: rgba(var(--sk_foreground_min_solid, 248, 248, 248), 1);\n    border-radius: 6px;\n    user-select: none;\n    min-width: 360px;\n    z-index: 512;\n    max-height: calc(100vh - 20px);\n    color: rgb(29, 28, 29);\n  }\n`;\n\nexport const CloseModalButton = styled.button`\n  position: absolute;\n  right: 10px;\n  top: 6px;\n  background: transparent;\n  border: none;\n  font-size: 30px;\n  cursor: pointer;\n`;\n","import { CreateMenu, CloseModalButton } from '@components/Menu/styles';\nimport React, { CSSProperties, FC, PropsWithChildren, useCallback } from 'react';\n\ninterface Props {\n  show: boolean;\n  onCloseModal: () => void;\n  style: CSSProperties;\n  closeButton?: boolean;\n}\n\nconst Menu: FC<PropsWithChildren<Props>> = ({ closeButton = true, style, show, children, onCloseModal }) => {\n  const stopPropagation = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n  }, []);\n\n  if (!show) {\n    return null;\n  }\n  return (\n    <CreateMenu onClick={onCloseModal}>\n      <div onClick={stopPropagation} style={style}>\n        {closeButton && <CloseModalButton onClick={onCloseModal}>&times;</CloseModalButton>}\n        {children}\n      </div>\n    </CreateMenu>\n  );\n};\n\nexport default Menu;\n","import styled from '@emotion/styled';\n\nexport const RightMenu = styled.div`\n  float: right;\n`;\n\nexport const Header = styled.header`\n  height: 38px;\n  background: rgba(10, 0, 90);\n  color: #ffffff;\n  box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.1);\n  padding: 5px;\n  text-align: center;\n`;\n\nexport const ProfileImg = styled.img`\n  width: 28px;\n  height: 28px;\n  position: absolute;\n  top: 5px;\n  right: 16px;\n`;\n\nexport const ProfileModal = styled.div`\n  display: flex;\n  padding: 20px;\n\n  & img {\n    display: flex;\n  }\n\n  & > div {\n    display: flex;\n    flex-direction: column;\n    margin-left: 10px;\n  }\n\n  & #profile-name {\n    font-weight: bold;\n    display: inline-flex;\n  }\n\n  & #profile-active {\n    font-size: 13px;\n    display: inline-flex;\n  }\n`;\n\nexport const LogOutButton = styled.button`\n  border: none;\n  width: 100%;\n  border-top: 1px solid rgb(29, 28, 29);\n  background: transparent;\n  display: block;\n  height: 33px;\n  padding: 5px 20px 5px;\n  outline: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceWrapper = styled.div`\n  display: flex;\n  flex: 1;\n`;\n\nexport const Workspaces = styled.div`\n  width: 65px;\n  display: inline-flex;\n  flex-direction: column;\n  align-items: center;\n  background: rgba(20, 10, 110);\n  border-top: 1px solid rgb(50, 20, 170);\n  border-right: 1px solid rgb(50, 20, 170);\n  vertical-align: top;\n  text-align: center;\n  padding: 15px 0 0;\n`;\n\nexport const CenterDiv = styled.nav`\n  flex: 1;\n  display: inline-flex;\n  flex-direction: column;\n  background: rgba(20, 10, 110);\n  color: rgb(188, 171, 188);\n  vertical-align: top;\n\n  & a {\n    padding-left: 36px;\n    color: inherit;\n    text-decoration: none;\n    height: 28px;\n    line-height: 28px;\n    display: flex;\n    align-items: center;\n\n    &.selected {\n      color: white;\n    }\n  }\n\n  & .bold {\n    color: white;\n    font-weight: bold;\n  }\n\n  & .count {\n    margin-left: auto;\n    background: #cd2553;\n    border-radius: 16px;\n    display: inline-block;\n    font-size: 12px;\n    font-weight: 700;\n    height: 18px;\n    line-height: 18px;\n    padding: 0 9px;\n    color: white;\n    margin-right: 16px;\n  }\n\n  & h2 {\n    height: 36px;\n    line-height: 36px;\n    margin: 0;\n    text-overflow: ellipsis;\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 15px;\n  }\n`;\n\nexport const WorkspaceName = styled.button`\n  height: 64px;\n  line-height: 64px;\n  border: none;\n  width: 100%;\n  text-align: left;\n  border-top: 1px solid rgb(82, 38, 83);\n  border-bottom: 1px solid rgb(82, 38, 83);\n  font-weight: 900;\n  font-size: 24px;\n  background: rgba(30, 10, 120);\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n  padding: 0;\n  padding-left: 16px;\n  margin: 0;\n  color: white;\n  cursor: pointer;\n`;\n\nexport const MenuScroll = styled.div`\n  height: calc(100vh - 102px);\n  overflow-y: auto;\n`;\n\nexport const WorkspaceModal = styled.div`\n  padding: 10px 0 0;\n\n  & h2 {\n    padding-left: 20px;\n  }\n\n  & > button {\n    width: 100%;\n    height: 28px;\n    padding: 4px;\n    border: none;\n    background: rgba(30, 10, 120);\n    border-top: 1px solid rgb(28, 29, 28);\n    cursor: pointer;\n\n    &:last-of-type {\n      border-bottom: 1px solid rgb(28, 29, 28);\n    }\n  }\n`;\n\nexport const RightDiv = styled.div`\n  flex: 1;\n`;\n\nexport const AddButton = styled.button`\n  color: white;\n  font-size: 24px;\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  background: rgba(30, 10, 120);\n  border: none;\n  cursor: pointer;\n`;\n\nexport const WorkspaceButton = styled.button`\n  display: inline-block;\n  width: 40px;\n  height: 40px;\n  border-radius: 10px;\n  background: white;\n  border: 3px solid #3f0e40;\n  margin-bottom: 15px;\n  font-size: 18px;\n  font-weight: 700;\n  color: black;\n  cursor: pointer;\n`;\n","import styled from '@emotion/styled';\n\n// styled div 컴포넌트의 이름을 MapContainer로 변경\nexport const MapContainer = styled.div`\n  width: 100%;\n  height: calc(100vh - 158px);\n`;\n\nexport const InfoDiv = styled.div`\n  z-index: 100;\n  width: 50vw;\n  height: 350px;\n  bottom: 10px;\n  right: 10px;\n  position: absolute;\n  background: #f0f0f0;\n  opacity: 0.6;\n`;\n\nexport const ResetButton = styled.button`\n  z-index: 100;\n  top: 0;\n  left: 0;\n  width: 40px;\n  height: 40px;\n  position: absolute;\n  background: #f0f0f0;\n  opacity: 0.6;\n`;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport {\n  PlaybarContainer,\n  ContentLine,\n  ContentLineDiv,\n  RightContentIcon,\n  SelectOption,\n  ProgressBar,\n  ContentLineText,\n  RightContent,\n  GateMarker,\n} from '@components/Playbar/styles';\nimport {\n  transformTimeToPoint,\n  transformPointToTime,\n  findForwardAndBackwardGateWithTraveledDistance,\n  findLatestGate,\n  findTraveledCoordinateWithForwardAndBackwardGateAndTraveledDistance,\n} from '@utils/physicsUtil';\nimport { IGate, NullableIGate } from '@typings/db';\nimport useCustomPlaybar from '@hooks/useCustomPlaybar';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store';\nimport { ResetButton } from '@components/Map/styles';\n\nconst Playbar = () => {\n  const gatesState = useSelector((state: RootState) => state.gatesSlice);\n  const {\n    playbarState,\n    updateSelectedTimeHook,\n    updateSelectedPointHook,\n    updateFirstGateHook,\n    updateLastGateHook,\n    updatePreviousGateBasedOnSelectedHook,\n    updateLatestGateBasedOnSelectedHook,\n    updateNextGateBasedOnSelectedHook,\n    updatePreviousGateBasedOnCurrentHook,\n    updateLatestGateBasedOnCurrentHook,\n    updateNextGateBasedOnCurrentHook,\n  } = useCustomPlaybar();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [playSpeed, setPlaySpeed] = useState<number>(1);\n  const [totalDistance, setTotalDistance] = useState(0);\n  const [progressBarWidth, setProgressBarWidth] = useState<number>(0);\n  const [progressBarValue, setProgressBarValue] = useState<number>(0);\n\n  // initial 값은 selectedPoint, firstGate, lastGate  가 있어야 한다.\n  // gatesState 가 변경하는 것 들 :  changeSelectedPoint() [selectedPoint, selectedTime,  ~~GateBasedOnSelected, ...],\n  //                               changeGatesBasedOnCurrent() [firstGate, lastGate, ~~BasedOnCurrent, ... ]\n\n  // 초기 상태\n  useEffect(() => {\n    if (gatesState && gatesState.length > 0) {\n      const newGate = gatesState[0];\n      changeSelectedPoint(newGate);\n      changeGatesBasedOnCurrent();\n    }\n  }, [gatesState]);\n\n  // progressBar 값  업데이트\n  useEffect(() => {\n    if (playbarState.selectedPoint?.traveledDistance != null && totalDistance > 0) {\n      const newValue = (playbarState.selectedPoint.traveledDistance / totalDistance) * 100;\n      setProgressBarValue(newValue);\n    }\n  }, [playbarState.selectedPoint?.traveledDistance, totalDistance]);\n\n  // 재생시 1초마다 selectedTime 변경\n  useEffect(() => {\n    if (isPlaying && playbarState.selectedTime) {\n      const interval = setInterval(() => {\n        if (playbarState.selectedTime) {\n          const newTime = calculateNewTime(playbarState.selectedTime, playSpeed);\n          changeSelectedTime(newTime);\n        }\n      }, 1000 / playSpeed);\n\n      return () => clearInterval(interval);\n    }\n  }, [isPlaying, playSpeed, playbarState.selectedTime]);\n\n  // selectedPoint -> selectedTime ~~GateBasedOnSelected, ... 변경,\n  const changeSelectedPoint = useCallback(\n    (newPoint: NullableIGate | null) => {\n      if (newPoint?.traveledDistance != null) {\n        const newTime = transformPointToTime(gatesState, newPoint);\n        if (newTime) {\n          updateSelectedTimeHook(newTime);\n        }\n        changeGatesBasedOnSelected(newPoint?.traveledDistance);\n      }\n      updateSelectedPointHook(newPoint);\n    },\n    [gatesState, updateSelectedPointHook, updateSelectedTimeHook],\n  );\n\n  // selectedPoint -> selectedTime ~~GateBasedOnSelected, ... 변경,\n  const changeSelectedPointNotChangingSelectedTime = useCallback(\n    (newPoint: NullableIGate | null) => {\n      updateSelectedPointHook(newPoint);\n      if (newPoint?.traveledDistance != null) {\n        changeGatesBasedOnSelected(newPoint?.traveledDistance);\n      }\n    },\n    [updateSelectedPointHook],\n  );\n\n  const changeGatesBasedOnSelected = useCallback(\n    (selectedTraveledDistance: number | null) => {\n      // selectedTraveledDistance -> previous, latest, next gate 결정\n      const { forwardGateWithTraveledDistance, backwardGateWithTraveledDistance } =\n        findForwardAndBackwardGateWithTraveledDistance(gatesState, selectedTraveledDistance);\n      let previousGate: IGate | null = null;\n      if (forwardGateWithTraveledDistance != null && forwardGateWithTraveledDistance.sequence > 0) {\n        previousGate = gatesState[forwardGateWithTraveledDistance.sequence - 1];\n      }\n      updatePreviousGateBasedOnSelectedHook(previousGate);\n      updateLatestGateBasedOnSelectedHook(forwardGateWithTraveledDistance);\n      updateNextGateBasedOnSelectedHook(backwardGateWithTraveledDistance);\n    },\n    [\n      gatesState,\n      updateLatestGateBasedOnSelectedHook,\n      updateNextGateBasedOnSelectedHook,\n      updatePreviousGateBasedOnSelectedHook,\n    ],\n  );\n\n  const changeGatesBasedOnCurrent = useCallback(() => {\n    // firstGate\n    updateFirstGateHook(gatesState[0]);\n    // lastGate\n    const gateStateLength = gatesState.length;\n    updateLastGateHook(gatesState[gateStateLength - 1]);\n    const latestGate = findLatestGate(gatesState);\n    // ~~BasedOnCurrent\n    let previousGate = null;\n    let nextGate = null;\n    if (latestGate != null && latestGate.sequence > 0) {\n      previousGate = gatesState[latestGate.sequence - 1];\n    }\n    if (latestGate != null && latestGate.sequence < gateStateLength - 1) {\n      nextGate = gatesState[latestGate.sequence + 1];\n    }\n    updatePreviousGateBasedOnCurrentHook(previousGate);\n    updateLatestGateBasedOnCurrentHook(latestGate);\n    updateNextGateBasedOnCurrentHook(nextGate);\n    if (latestGate?.traveledDistance) {\n      setTotalDistance(latestGate?.traveledDistance);\n    }\n  }, [\n    gatesState,\n    updateFirstGateHook,\n    updateLastGateHook,\n    updateLatestGateBasedOnCurrentHook,\n    updateNextGateBasedOnCurrentHook,\n    updatePreviousGateBasedOnCurrentHook,\n  ]);\n\n  // selectedTime -> selectedPoint 도 변경\n  const changeSelectedTime = useCallback(\n    (newTime: string) => {\n      updateSelectedTimeHook(newTime);\n      const point = transformTimeToPoint(gatesState, newTime);\n      changeSelectedPointNotChangingSelectedTime(point);\n    },\n    [changeSelectedPointNotChangingSelectedTime, gatesState, updateSelectedTimeHook],\n  );\n\n  // ProgressBar 클릭 핸들러\n  const handleProgressBarClick = (e: React.MouseEvent<HTMLInputElement>) => {\n    const progressBar = e.currentTarget;\n    const clickPosition = e.nativeEvent.offsetX;\n    const progressBarWidth = progressBar.clientWidth;\n    setProgressBarWidth(progressBarWidth);\n    const clickRatio = clickPosition / progressBarWidth;\n    // 클릭 위치에 비례해서 selectedTraveledDistance 구하기\n    const newTraveledDistance = totalDistance * clickRatio;\n    // `traveledDistance`에 근접한 (time 무시) forward/backward 게이트 찾기\n    const { forwardGateWithTraveledDistance, backwardGateWithTraveledDistance } =\n      findForwardAndBackwardGateWithTraveledDistance(gatesState, newTraveledDistance);\n    if (forwardGateWithTraveledDistance != null && backwardGateWithTraveledDistance != null) {\n      // 중간 `traveledDistance` ->  중간 'coordinate'\n      const newCoordinate = findTraveledCoordinateWithForwardAndBackwardGateAndTraveledDistance(\n        forwardGateWithTraveledDistance,\n        backwardGateWithTraveledDistance,\n        newTraveledDistance,\n      );\n      const newGate = {\n        id: 0,\n        sequence: 0,\n        time: playbarState.selectedTime,\n        coordinate: newCoordinate,\n        traveledDistance: newTraveledDistance,\n      };\n      changeSelectedPoint(newGate);\n    }\n  };\n\n  const handlePlayPause = () => setIsPlaying(!isPlaying);\n  const handleSpeedChange = (e: React.ChangeEvent<HTMLSelectElement>) => setPlaySpeed(parseFloat(e.target.value));\n\n  const calculateNewTime = useCallback((selectedTime: string, playSpeed: number) => {\n    const dateTime = new Date(selectedTime);\n\n    const timeIncrement = 1000 * playSpeed; // 1초 * playSpeed\n\n    const newTime = new Date(dateTime.getTime() + timeIncrement);\n\n    // console.log('dateTime, timeIncrement, newTime : ', dateTime, timeIncrement, newTime);\n\n    return newTime.toISOString();\n  }, []);\n\n  const handleResetSelectedTime = useCallback(() => {\n    const newTime = new Date().toISOString();\n    updateSelectedTimeHook(newTime);\n    console.log('resetButton newTime : ', newTime);\n  }, [updateSelectedTimeHook]);\n\n  return (\n    <PlaybarContainer>\n      <ResetButton onClick={handleResetSelectedTime}></ResetButton>\n      <ContentLine>\n        <RightContentIcon className=\"fa-solid fa-backward\"></RightContentIcon>\n        {isPlaying ? (\n          <>\n            <RightContentIcon className={'fa-solid fa-pause'} onClick={handlePlayPause} />\n            <RightContentIcon className={'fa-solid fa-play dimmed'} />\n          </>\n        ) : (\n          <>\n            <RightContentIcon className={'fa-solid fa-pause dimmed'} />\n            <RightContentIcon className={'fa-solid fa-play'} onClick={handlePlayPause} />\n          </>\n        )}\n        <RightContentIcon className=\"fa-solid fa-forward\"></RightContentIcon>\n        <ContentLine>\n          <ContentLineText className={'whiteFont margin0 padding0'}>\n            isPlaying {isPlaying ? 'true' : 'false'}\n          </ContentLineText>\n          <ContentLineText className={'whiteFont margin0 padding0'}>\n            playSpeed {playSpeed ? playSpeed : 'null'}\n          </ContentLineText>\n        </ContentLine>\n        <SelectOption onChange={handleSpeedChange}>\n          <option value=\"0.25\">X 0.25</option>\n          <option value=\"0.5\">X 0.5</option>\n          <option value=\"1\" selected>\n            X 1.0\n          </option>\n          <option value=\"2\">X 2.0</option>\n          <option value=\"4\">X 4.0</option>\n        </SelectOption>\n      </ContentLine>\n      <RightContent>\n        <ContentLine className={'jcCenter'}>\n          <ContentLineDiv className={'flex width100 relative shortenHeight'}>\n            <ProgressBar\n              type=\"range\"\n              // defaultValue={\n              //   playbarState.selectedPoint?.traveledDistance\n              //     ? (playbarState.selectedPoint.traveledDistance / totalDistance) * 100\n              //     : 0\n              // }\n              value={progressBarValue} // progressBar 값 설정\n              max=\"100\"\n              onClick={handleProgressBarClick}\n            />\n          </ContentLineDiv>\n        </ContentLine>\n        <ContentLine className={'jcCenter'}>\n          <ContentLineDiv style={{ width: `${progressBarWidth}px` }} className={'flex relative shortenHeight'}>\n            {gatesState.map((gate) => (\n              <GateMarker key={gate.sequence} style={{ left: `${(gate.traveledDistance / totalDistance) * 100}%` }}>\n                {gate.sequence}\n              </GateMarker>\n            ))}\n          </ContentLineDiv>\n        </ContentLine>\n      </RightContent>\n    </PlaybarContainer>\n  );\n};\n\nexport default Playbar;\n","import Map from '@components/Map';\nimport Menu from '@components/Menu';\nimport Modal from '@components/Modal';\nimport useInput from '@hooks/useInput';\n\nimport { Button, Input, Label } from '@pages/member/SignUp/styles';\nimport gravatar from 'gravatar';\nimport React, { useCallback, useState } from 'react';\nimport { Link, Navigate } from 'react-router-dom';\nimport { toast, ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Outlet } from 'react-router-dom';\n\nimport {\n  AddButton,\n  CenterDiv,\n  Header,\n  LogOutButton,\n  ProfileImg,\n  ProfileModal,\n  RightDiv,\n  RightMenu,\n  WorkspaceButton,\n  Workspaces,\n  WorkspaceWrapper,\n} from './styles';\nimport useCustomMember from '@hooks/useCustomMember';\nimport { postCreateWorkspace } from '@api/workspaceApi';\nimport Playbar from '@components/Playbar';\nimport { IWorkspace } from '@typings/db';\nimport { ContentLineText, ContentRow, RightContent } from '@components/Playbar/styles';\nimport useCustomPlaybar from '@hooks/useCustomPlaybar';\nimport { InfoDiv } from '@components/Map/styles';\n\nconst BasicLayout = () => {\n  const { isLogin, memberState } = useCustomMember();\n  const { playbarState } = useCustomPlaybar();\n  const { currentTime, selectedTime, selectedPoint } = playbarState;\n  const { doLogout, moveToPath } = useCustomMember();\n\n  const [newWorkspace, onChangeNewWorkspace, setNewWorkspace] = useInput('');\n  const [newUrl, onChangeNewUrl, setNewUrl] = useInput('');\n\n  const [showUserMenu, setShowUserMenu] = useState(false);\n  const [showCreateWorkspaceModal, setShowCreateWorkspaceModal] = useState(false);\n\n  const onCreateWorkspace = useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      if (!newWorkspace || !newWorkspace.trim()) {\n        return;\n      }\n      if (!newUrl || !newUrl.trim()) {\n        return;\n      }\n      const workspaceCreateParam = {\n        name: newWorkspace,\n        url: newUrl,\n      };\n      postCreateWorkspace(workspaceCreateParam)\n        .then(() => {\n          setShowCreateWorkspaceModal(false);\n          setNewWorkspace('');\n          setNewUrl('');\n        })\n        .catch((error) => {\n          console.dir(error);\n          toast.error(error.response?.data, { position: 'bottom-center' });\n        });\n    },\n    [newWorkspace, newUrl, setNewWorkspace, setNewUrl],\n  );\n\n  const handleClickLogout = () => {\n    doLogout();\n    alert('로그아웃되었습니다.');\n    moveToPath('/');\n  };\n\n  const onClickCreateWorkspace = useCallback(() => {\n    setShowCreateWorkspaceModal(true);\n  }, []);\n\n  const onClickUserProfile = useCallback(() => {\n    setShowUserMenu((prev) => !prev);\n  }, []);\n\n  const onCloseModal = useCallback(() => {\n    setShowCreateWorkspaceModal(false);\n  }, []);\n\n  if (!memberState) {\n    return <Navigate to=\"/member/login\" />;\n  }\n  return (\n    <div>\n      <InfoDiv>\n        <ContentRow>\n          <RightContent className={'whiteFont margin0 padding0'}>\n            <ContentLineText className={'whiteFont margin0 padding0'}>currentTime : [{currentTime}]</ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>selectedTime : [{selectedTime}]</ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              selectedTraveledDistance : [{selectedPoint?.traveledDistance}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              selectedLatitude : [{selectedPoint?.coordinate?.latitude}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              selectedLongitude : [{selectedPoint?.coordinate?.longitude}]\n            </ContentLineText>\n          </RightContent>\n          <RightContent className={'whiteFont margin0 padding0'}>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              firstGate : [{playbarState?.firstGate && playbarState.firstGate.sequence}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              lastGate : [{playbarState?.lastGate && playbarState.lastGate.sequence}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              previousGateBasedOnSelected : [\n              {playbarState?.previousGateBasedOnSelected && playbarState.previousGateBasedOnSelected.sequence}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              latestGateBasedOnSelected : [\n              {playbarState?.latestGateBasedOnSelected && playbarState.latestGateBasedOnSelected.sequence}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              nextGateBasedOnSelected : [\n              {playbarState?.nextGateBasedOnSelected && playbarState.nextGateBasedOnSelected.sequence}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              previousGateBasedOnCurrent : [\n              {playbarState?.previousGateBasedOnCurrent && playbarState.previousGateBasedOnCurrent.sequence}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              latestGateBasedOnCurrent : [\n              {playbarState?.latestGateBasedOnCurrent && playbarState.latestGateBasedOnCurrent.sequence}]\n            </ContentLineText>\n            <ContentLineText className={'whiteFont margin0 padding0'}>\n              nextGateBasedOnCurrent : [\n              {playbarState?.nextGateBasedOnCurrent && playbarState.nextGateBasedOnCurrent.sequence}]\n            </ContentLineText>\n          </RightContent>\n        </ContentRow>\n      </InfoDiv>\n      <Header>\n        {isLogin && memberState && (\n          <RightMenu>\n            <span onClick={onClickUserProfile}>\n              <ProfileImg src={gravatar.url(memberState.email, { s: '28px', d: 'retro' })} alt={memberState.nickname} />\n            </span>\n            {showUserMenu && (\n              <Menu style={{ right: 0, top: 38 }} show={showUserMenu} onCloseModal={onClickUserProfile}>\n                <ProfileModal>\n                  <img src={gravatar.url(memberState.email, { s: '36px', d: 'retro' })} alt={memberState.nickname} />\n                  <div>\n                    <span id=\"profile-name\">{memberState.nickname}</span>\n                    <span id=\"profile-active\">Active</span>\n                  </div>\n                </ProfileModal>\n                <LogOutButton onClick={handleClickLogout}>로그아웃</LogOutButton>\n              </Menu>\n            )}\n          </RightMenu>\n        )}\n      </Header>\n      <WorkspaceWrapper>\n        <Workspaces>\n          {memberState?.workspaces?.map((ws: IWorkspace) => {\n            return (\n              <Link key={ws.id} to={`/workspace/${ws.url}/`}>\n                <WorkspaceButton>{ws.name.slice(0, 1).toUpperCase()}</WorkspaceButton>\n              </Link>\n            );\n          })}\n          {/*</Link>*/}\n          <AddButton onClick={onClickCreateWorkspace}>+</AddButton>\n        </Workspaces>\n        <CenterDiv>\n          <Map />\n          <Playbar />\n        </CenterDiv>\n        <RightDiv>\n          <Outlet />\n        </RightDiv>\n      </WorkspaceWrapper>\n      <Modal show={showCreateWorkspaceModal} onCloseModal={onCloseModal}>\n        <form onSubmit={onCreateWorkspace}>\n          <Label id=\"workspace-label\">\n            <span>워크스페이스 이름</span>\n            <Input id=\"workspace\" value={newWorkspace} onChange={onChangeNewWorkspace} />\n          </Label>\n          <Label id=\"workspace-url-label\">\n            <span>워크스페이스 url</span>\n            <Input id=\"workspace-url\" value={newUrl} onChange={onChangeNewUrl} />\n          </Label>\n          <Button type=\"submit\">생성하기</Button>\n        </form>\n      </Modal>\n      <ToastContainer position=\"bottom-center\" />\n    </div>\n  );\n};\nexport default BasicLayout;\n","import styled from '@emotion/styled';\n\nexport const Header = styled.header`\n  text-align: center;\n  font-family: Slack-Larsseit, Helvetica Neue, Helvetica, Segoe UI, Tahoma, Arial, sans-serif;\n  font-weight: 700;\n  font-size: 48px;\n  line-height: 46px;\n  letter-spacing: -0.75px;\n  margin-top: 50px;\n  margin-bottom: 50px;\n`;\n\nexport const Form = styled.form`\n  margin: 0 auto;\n  width: 400px;\n  max-width: 400px;\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 16px;\n\n  & > span {\n    display: block;\n    text-align: left;\n    padding-bottom: 8px;\n    font-size: 15px;\n    cursor: pointer;\n    line-height: 1.46666667;\n    font-weight: 700;\n  }\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  --saf-0: rgba(var(--sk_foreground_high_solid, 134, 134, 134), 1);\n  border: 1px solid var(--saf-0);\n  transition: border 80ms ease-out, box-shadow 80ms ease-out;\n  box-sizing: border-box;\n  margin: 0 0 20px;\n  width: 100%;\n  color: rgba(var(--sk_primary_foreground, 29, 28, 29), 1);\n  background-color: rgba(var(--sk_primary_background, 255, 255, 255), 1);\n  padding: 12px;\n  height: 44px;\n  padding-top: 11px;\n  padding-bottom: 13px;\n  font-size: 18px;\n  line-height: 1.33333333;\n\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Button = styled.button`\n  margin-bottom: 12px;\n  width: 100%;\n  max-width: 100%;\n  color: #fff;\n  background: rgba(20, 10, 110);\n  border: none;\n  font-size: 18px;\n  font-weight: 900;\n  height: 44px;\n  min-width: 96px;\n  padding: 0 16px 3px;\n  transition: all 80ms linear;\n  user-select: none;\n  outline: none;\n  cursor: pointer;\n  border-radius: 4px;\n  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);\n\n  &:hover {\n    background-color: rgba(50, 20, 160);\n    border: none;\n  }\n  &:focus {\n    --saf-0: rgba(var(--sk_highlight, 18, 100, 163), 1);\n    box-shadow: 0 0 0 1px var(--saf-0), 0 0 0 5px rgba(29, 155, 209, 0.3);\n  }\n`;\n\nexport const Error = styled.div`\n  color: #e01e5a;\n  margin: 8px 0 16px;\n  font-weight: bold;\n`;\n\nexport const Success = styled.div`\n  color: #2eb67d;\n  font-weight: bold;\n`;\n\nexport const LinkContainer = styled.p`\n  font-size: 13px;\n  color: #616061;\n  margin: 0 auto 8px;\n  width: 400px;\n  max-width: 400px;\n\n  & a {\n    color: #1264a3;\n    text-decoration: none;\n    font-weight: 700;\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n`;\n","import { Color, IGate, Location, NullableIGate, PlaybarState, ToleranceRange } from '@typings/db';\n\nexport function getGateByLocation(playbarState: PlaybarState, location: Location): IGate | null {\n  switch (location) {\n    case Location.FIRST_GATE:\n      return playbarState.firstGate;\n    case Location.LAST_GATE:\n      return playbarState.lastGate;\n    case Location.PREVIOUS_GATE_BASED_ON_SELECTED:\n      return playbarState.previousGateBasedOnSelected;\n    case Location.LATEST_GATE_BASED_ON_SELECTED:\n      return playbarState.latestGateBasedOnSelected;\n    case Location.NEXT_GATE_BASED_ON_SELECTED:\n      return playbarState.nextGateBasedOnSelected;\n    case Location.PREVIOUS_GATE_BASED_ON_CURRENT:\n      return playbarState.previousGateBasedOnCurrent;\n    case Location.LATEST_GATE_BASED_ON_CURRENT:\n      return playbarState.latestGateBasedOnCurrent;\n    case Location.NEXT_GATE_BASED_ON_CURRENT:\n      return playbarState.nextGateBasedOnCurrent;\n    default:\n      return null;\n  }\n}\n\nexport function calculateDistance(startGate: NullableIGate | null, endGate: NullableIGate | null) {\n  let distance: number | null = null;\n  if (\n    startGate !== null &&\n    endGate !== null &&\n    startGate.traveledDistance !== null &&\n    endGate.traveledDistance !== null\n  ) {\n    distance = endGate.traveledDistance - startGate.traveledDistance;\n  }\n  return distance;\n}\n\nexport function calculateTime(startGate: NullableIGate | null, endGate: NullableIGate | null) {\n  let elaspedTime: number | null = null;\n  if (\n    startGate !== null &&\n    endGate !== null &&\n    startGate.traveledDistance !== null &&\n    endGate.traveledDistance !== null &&\n    startGate.time !== null &&\n    endGate.time !== null\n  ) {\n    elaspedTime = new Date(endGate.time).getTime() - new Date(startGate.time).getTime();\n  }\n  return elaspedTime;\n}\n\nexport function calculateSpeed(startGate: NullableIGate | null, endGate: NullableIGate | null) {\n  let elaspedSpeed: number | null = null;\n  if (\n    startGate !== null &&\n    endGate !== null &&\n    startGate.traveledDistance !== null &&\n    endGate.traveledDistance !== null &&\n    startGate.time !== null &&\n    endGate.time !== null\n  ) {\n    let distance = endGate.traveledDistance - startGate.traveledDistance;\n    let elaspedTime = new Date(endGate.time).getTime() - new Date(startGate.time).getTime();\n    elaspedSpeed = distance / elaspedTime;\n  }\n  return elaspedSpeed;\n}\n\nexport function formatToTwoDecimalPlaces(value: number | null): string {\n  return value !== null ? value.toFixed(2) : 'null';\n}\n\nexport function convertEnumColorToString(enumColor: Color): string {\n  switch (enumColor) {\n    case Color.SKY_BLUE:\n      return '#87CEEB';\n    case Color.PURPLE:\n      return '#800080';\n    case Color.LIGHT_GREEN:\n      return '#90EE90';\n    case Color.YELLOW:\n      return '#FFFF00';\n    default:\n      return '#999977'; // 기본 색상\n  }\n}\n\nexport function convertEnumToleranceRangeToNumber(enumToleranceRange: ToleranceRange): number {\n  switch (enumToleranceRange) {\n    case ToleranceRange.FIVE:\n      return 5;\n    case ToleranceRange.TEN:\n      return 10;\n    case ToleranceRange.TWENTY:\n      return 20;\n    default:\n      return 5; // 기본값\n  }\n}\n"],"names":["CreateModal","styled","div","_templateObject","_taggedTemplateLiteral","CloseModalButton","button","_templateObject2","_ref","show","children","onCloseModal","stopPropagation","useCallback","e","React","onClick","PlaybarContainer","Content","ContentRow","_templateObject3","LeftContent","_templateObject4","RightContent","_templateObject5","ContentLine","_templateObject6","ContentLineText","p","_templateObject7","ContentLineDiv","_templateObject8","ContentLineInput","input","_templateObject9","SelectOption","select","_templateObject10","CustomIconButton","_templateObject11","CustomTextButton","_templateObject12","RightContentIcon","i","_templateObject13","ProgressBar","_templateObject14","_templateObject15","GateMarker","_templateObject16","_templateObject17","playbarState","useSelector","state","playbarSlice","isLive","dispatch","useDispatch","useEffect","interval","setInterval","updateCurrentTime","clearInterval","handleLiveToggle","toggleLive","updateSelectedTimeHook","selectedTime","updateSelectedTime","updateSelectedPointHook","selectedPoint","updateSelectedPoint","updateFirstGateHook","firstGate","updateFirstGate","updateLastGateHook","lastGate","updateLastGate","updatePreviousGateBasedOnSelectedHook","previousGate","updatePreviousGateBasedOnSelected","updateLatestGateBasedOnSelectedHook","latestGate","updateLatestGateBasedOnSelected","updateNextGateBasedOnSelectedHook","nextGate","updateNextGateBasedOnSelected","updatePreviousGateBasedOnCurrentHook","updatePreviousGateBasedOnCurrent","updateLatestGateBasedOnCurrentHook","updateLatestGateBasedOnCurrent","updateNextGateBasedOnCurrentHook","updateNextGateBasedOnCurrent","initialData","_useState2","useState","value","setValue","target","_regeneratorRuntime","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_slicedToArray","Array","isArray","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","_arrayLikeToArray","toString","from","test","_useCustomGates","useCustomGates","gatesState","updateGatesWithIndex","useCustomPlaybar","containerRef","useRef","mapRef","setMarkers","_useState4","path","setPath","_useState6","polyline","setPolyline","_useState8","setPolylines","_useState10","lat","lng","initialLocation","setInitialLocation","_useState12","setSelectedMarker","_useState14","selectedCoordinate","setSelectedCoordinate","settingState","useCustomSetting","colorSetting","toleranceRange","coordinate","executeAllSequentially","_callee","_context","current","rerenderMap","updateGatesMarkers","updatePolylineWithColor","updateSelectedPointMarker","_callee2","_context2","google","maps","Map","center","zoom","mapId","_callee3","newMarkers","newPath","_context3","gate","index","_gate$coordinate","latitude","longitude","gateTag","document","createElement","className","textContent","markerPosition","createPosition","newMarker","marker","AdvancedMarkerElement","position","map","content","gmpDraggable","addListener","event","latLng","newCoordinate","newPosition","updatedPath","_callee4","newPolyline","_context4","setMap","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","_callee5","newPolylines","_context5","time","traveledDistance","currentSegmentSpeed","calculateSpeed","convertEnumColorToString","initialColor","previousSegmentSpeed","Math","abs","convertEnumToleranceRangeToNumber","constantSpeedColor","decelerationColor","accelerationColor","_callee6","newSelectedMarker","pointTag","_context6","APIProvider","apiKey","ref","style","width","height","CreateMenu","_ref$closeButton","closeButton","RightMenu","Header","header","ProfileImg","img","ProfileModal","LogOutButton","WorkspaceWrapper","Workspaces","CenterDiv","nav","RightDiv","AddButton","WorkspaceButton","InfoDiv","ResetButton","_playbarState$selecte2","gatesSlice","_useCustomPlaybar","isPlaying","setIsPlaying","playSpeed","setPlaySpeed","totalDistance","setTotalDistance","progressBarWidth","setProgressBarWidth","progressBarValue","setProgressBarValue","newGate","changeSelectedPoint","changeGatesBasedOnCurrent","_playbarState$selecte","newValue","newTime","calculateNewTime","changeSelectedTime","newPoint","transformPointToTime","changeGatesBasedOnSelected","changeSelectedPointNotChangingSelectedTime","selectedTraveledDistance","_findForwardAndBackwa","findForwardAndBackwardGateWithTraveledDistance","forwardGateWithTraveledDistance","backwardGateWithTraveledDistance","sequence","gateStateLength","findLatestGate","point","transformTimeToPoint","handlePlayPause","dateTime","Date","timeIncrement","getTime","toISOString","handleResetSelectedTime","console","log","onChange","parseFloat","selected","max","progressBar","currentTarget","clickPosition","nativeEvent","offsetX","clientWidth","newTraveledDistance","_findForwardAndBackwa2","findTraveledCoordinateWithForwardAndBackwardGateAndTraveledDistance","id","concat","key","left","_selectedPoint$coordi","_selectedPoint$coordi2","_memberState$workspac","_useCustomMember","useCustomMember","isLogin","memberState","currentTime","_useCustomMember2","doLogout","moveToPath","_useInput2","useInput","newWorkspace","onChangeNewWorkspace","setNewWorkspace","_useInput4","newUrl","onChangeNewUrl","setNewUrl","showUserMenu","setShowUserMenu","showCreateWorkspaceModal","setShowCreateWorkspaceModal","onCreateWorkspace","preventDefault","trim","workspaceCreateParam","url","postCreateWorkspace","error","_error$response","dir","toast","response","data","onClickCreateWorkspace","onClickUserProfile","previousGateBasedOnSelected","latestGateBasedOnSelected","nextGateBasedOnSelected","previousGateBasedOnCurrent","latestGateBasedOnCurrent","nextGateBasedOnCurrent","src","gravatar","email","alt","nickname","Menu","right","top","alert","workspaces","ws","Link","to","toUpperCase","Playbar","Outlet","Modal","onSubmit","Label","Input","Button","ToastContainer","Navigate","Form","form","label","Success","LinkContainer","getGateByLocation","location","Location","FIRST_GATE","LAST_GATE","PREVIOUS_GATE_BASED_ON_SELECTED","LATEST_GATE_BASED_ON_SELECTED","NEXT_GATE_BASED_ON_SELECTED","PREVIOUS_GATE_BASED_ON_CURRENT","LATEST_GATE_BASED_ON_CURRENT","NEXT_GATE_BASED_ON_CURRENT","calculateDistance","startGate","endGate","distance","calculateTime","elaspedTime","elaspedSpeed","formatToTwoDecimalPlaces","toFixed","enumColor","Color","SKY_BLUE","PURPLE","LIGHT_GREEN","YELLOW","enumToleranceRange","ToleranceRange","FIVE","TEN","TWENTY"],"sourceRoot":""}